//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18408
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.18408。
// 
#pragma warning disable 1591

namespace PLI.twfpc02 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ETGMTNWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class ETGMTNWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadFileToDocLibOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileNameForDocLibOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFilesOfDocLibOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFolderToDocLibOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileNameForDocLibComOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFolderNameForDocLibComOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileToVirtualDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDocLibOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAuthorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImageCompressOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImageAutoCompressOperationCompleted;
        
        private System.Threading.SendOrPostCallback sayHelloOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ETGMTNWebService() {
            this.Url = global::PLI.Properties.Settings.Default.PLI_twfpc02_ETGMTNWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadFileToDocLibCompletedEventHandler UploadFileToDocLibCompleted;
        
        /// <remarks/>
        public event GetFileNameForDocLibCompletedEventHandler GetFileNameForDocLibCompleted;
        
        /// <remarks/>
        public event DeleteFilesOfDocLibCompletedEventHandler DeleteFilesOfDocLibCompleted;
        
        /// <remarks/>
        public event HasFileCompletedEventHandler HasFileCompleted;
        
        /// <remarks/>
        public event CreateFolderToDocLibCompletedEventHandler CreateFolderToDocLibCompleted;
        
        /// <remarks/>
        public event GetFileNameForDocLibComCompletedEventHandler GetFileNameForDocLibComCompleted;
        
        /// <remarks/>
        public event GetFolderNameForDocLibComCompletedEventHandler GetFolderNameForDocLibComCompleted;
        
        /// <remarks/>
        public event DownloadFileToVirtualDirectoryCompletedEventHandler DownloadFileToVirtualDirectoryCompleted;
        
        /// <remarks/>
        public event CreateDocLibCompletedEventHandler CreateDocLibCompleted;
        
        /// <remarks/>
        public event AddAuthorityCompletedEventHandler AddAuthorityCompleted;
        
        /// <remarks/>
        public event ImageCompressCompletedEventHandler ImageCompressCompleted;
        
        /// <remarks/>
        public event ImageAutoCompressCompletedEventHandler ImageAutoCompressCompleted;
        
        /// <remarks/>
        public event sayHelloCompletedEventHandler sayHelloCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFileToDocLib", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFileToDocLib(string SiteName, string DocLibName, string FullUrlContainsFileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] BinaryFile, bool IsReplaceExistingFiles) {
            this.Invoke("UploadFileToDocLib", new object[] {
                        SiteName,
                        DocLibName,
                        FullUrlContainsFileName,
                        BinaryFile,
                        IsReplaceExistingFiles});
        }
        
        /// <remarks/>
        public void UploadFileToDocLibAsync(string SiteName, string DocLibName, string FullUrlContainsFileName, byte[] BinaryFile, bool IsReplaceExistingFiles) {
            this.UploadFileToDocLibAsync(SiteName, DocLibName, FullUrlContainsFileName, BinaryFile, IsReplaceExistingFiles, null);
        }
        
        /// <remarks/>
        public void UploadFileToDocLibAsync(string SiteName, string DocLibName, string FullUrlContainsFileName, byte[] BinaryFile, bool IsReplaceExistingFiles, object userState) {
            if ((this.UploadFileToDocLibOperationCompleted == null)) {
                this.UploadFileToDocLibOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileToDocLibOperationCompleted);
            }
            this.InvokeAsync("UploadFileToDocLib", new object[] {
                        SiteName,
                        DocLibName,
                        FullUrlContainsFileName,
                        BinaryFile,
                        IsReplaceExistingFiles}, this.UploadFileToDocLibOperationCompleted, userState);
        }
        
        private void OnUploadFileToDocLibOperationCompleted(object arg) {
            if ((this.UploadFileToDocLibCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileToDocLibCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileNameForDocLib", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetFileNameForDocLib(string ListNo) {
            object[] results = this.Invoke("GetFileNameForDocLib", new object[] {
                        ListNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileNameForDocLibAsync(string ListNo) {
            this.GetFileNameForDocLibAsync(ListNo, null);
        }
        
        /// <remarks/>
        public void GetFileNameForDocLibAsync(string ListNo, object userState) {
            if ((this.GetFileNameForDocLibOperationCompleted == null)) {
                this.GetFileNameForDocLibOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNameForDocLibOperationCompleted);
            }
            this.InvokeAsync("GetFileNameForDocLib", new object[] {
                        ListNo}, this.GetFileNameForDocLibOperationCompleted, userState);
        }
        
        private void OnGetFileNameForDocLibOperationCompleted(object arg) {
            if ((this.GetFileNameForDocLibCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileNameForDocLibCompleted(this, new GetFileNameForDocLibCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFilesOfDocLib", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFilesOfDocLib(string SiteName, string DeleteFileUrl) {
            this.Invoke("DeleteFilesOfDocLib", new object[] {
                        SiteName,
                        DeleteFileUrl});
        }
        
        /// <remarks/>
        public void DeleteFilesOfDocLibAsync(string SiteName, string DeleteFileUrl) {
            this.DeleteFilesOfDocLibAsync(SiteName, DeleteFileUrl, null);
        }
        
        /// <remarks/>
        public void DeleteFilesOfDocLibAsync(string SiteName, string DeleteFileUrl, object userState) {
            if ((this.DeleteFilesOfDocLibOperationCompleted == null)) {
                this.DeleteFilesOfDocLibOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFilesOfDocLibOperationCompleted);
            }
            this.InvokeAsync("DeleteFilesOfDocLib", new object[] {
                        SiteName,
                        DeleteFileUrl}, this.DeleteFilesOfDocLibOperationCompleted, userState);
        }
        
        private void OnDeleteFilesOfDocLibOperationCompleted(object arg) {
            if ((this.DeleteFilesOfDocLibCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFilesOfDocLibCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HasFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasFile(string DocLibUrl) {
            object[] results = this.Invoke("HasFile", new object[] {
                        DocLibUrl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasFileAsync(string DocLibUrl) {
            this.HasFileAsync(DocLibUrl, null);
        }
        
        /// <remarks/>
        public void HasFileAsync(string DocLibUrl, object userState) {
            if ((this.HasFileOperationCompleted == null)) {
                this.HasFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasFileOperationCompleted);
            }
            this.InvokeAsync("HasFile", new object[] {
                        DocLibUrl}, this.HasFileOperationCompleted, userState);
        }
        
        private void OnHasFileOperationCompleted(object arg) {
            if ((this.HasFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasFileCompleted(this, new HasFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolderToDocLib", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateFolderToDocLib(string SiteUrl, string DocLibName, string Folders) {
            this.Invoke("CreateFolderToDocLib", new object[] {
                        SiteUrl,
                        DocLibName,
                        Folders});
        }
        
        /// <remarks/>
        public void CreateFolderToDocLibAsync(string SiteUrl, string DocLibName, string Folders) {
            this.CreateFolderToDocLibAsync(SiteUrl, DocLibName, Folders, null);
        }
        
        /// <remarks/>
        public void CreateFolderToDocLibAsync(string SiteUrl, string DocLibName, string Folders, object userState) {
            if ((this.CreateFolderToDocLibOperationCompleted == null)) {
                this.CreateFolderToDocLibOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderToDocLibOperationCompleted);
            }
            this.InvokeAsync("CreateFolderToDocLib", new object[] {
                        SiteUrl,
                        DocLibName,
                        Folders}, this.CreateFolderToDocLibOperationCompleted, userState);
        }
        
        private void OnCreateFolderToDocLibOperationCompleted(object arg) {
            if ((this.CreateFolderToDocLibCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderToDocLibCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileNameForDocLibCom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetFileNameForDocLibCom(string SiteUrl, string DocLibName, string Folder) {
            object[] results = this.Invoke("GetFileNameForDocLibCom", new object[] {
                        SiteUrl,
                        DocLibName,
                        Folder});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileNameForDocLibComAsync(string SiteUrl, string DocLibName, string Folder) {
            this.GetFileNameForDocLibComAsync(SiteUrl, DocLibName, Folder, null);
        }
        
        /// <remarks/>
        public void GetFileNameForDocLibComAsync(string SiteUrl, string DocLibName, string Folder, object userState) {
            if ((this.GetFileNameForDocLibComOperationCompleted == null)) {
                this.GetFileNameForDocLibComOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNameForDocLibComOperationCompleted);
            }
            this.InvokeAsync("GetFileNameForDocLibCom", new object[] {
                        SiteUrl,
                        DocLibName,
                        Folder}, this.GetFileNameForDocLibComOperationCompleted, userState);
        }
        
        private void OnGetFileNameForDocLibComOperationCompleted(object arg) {
            if ((this.GetFileNameForDocLibComCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileNameForDocLibComCompleted(this, new GetFileNameForDocLibComCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderNameForDocLibCom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetFolderNameForDocLibCom(string SiteUrl, string DocLibName, string Folder) {
            object[] results = this.Invoke("GetFolderNameForDocLibCom", new object[] {
                        SiteUrl,
                        DocLibName,
                        Folder});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetFolderNameForDocLibComAsync(string SiteUrl, string DocLibName, string Folder) {
            this.GetFolderNameForDocLibComAsync(SiteUrl, DocLibName, Folder, null);
        }
        
        /// <remarks/>
        public void GetFolderNameForDocLibComAsync(string SiteUrl, string DocLibName, string Folder, object userState) {
            if ((this.GetFolderNameForDocLibComOperationCompleted == null)) {
                this.GetFolderNameForDocLibComOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderNameForDocLibComOperationCompleted);
            }
            this.InvokeAsync("GetFolderNameForDocLibCom", new object[] {
                        SiteUrl,
                        DocLibName,
                        Folder}, this.GetFolderNameForDocLibComOperationCompleted, userState);
        }
        
        private void OnGetFolderNameForDocLibComOperationCompleted(object arg) {
            if ((this.GetFolderNameForDocLibComCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderNameForDocLibComCompleted(this, new GetFolderNameForDocLibComCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFileToVirtualDirectory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DownloadFileToVirtualDirectory(string SiteUrl, string DocLibName, string FileUrl) {
            object[] results = this.Invoke("DownloadFileToVirtualDirectory", new object[] {
                        SiteUrl,
                        DocLibName,
                        FileUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileToVirtualDirectoryAsync(string SiteUrl, string DocLibName, string FileUrl) {
            this.DownloadFileToVirtualDirectoryAsync(SiteUrl, DocLibName, FileUrl, null);
        }
        
        /// <remarks/>
        public void DownloadFileToVirtualDirectoryAsync(string SiteUrl, string DocLibName, string FileUrl, object userState) {
            if ((this.DownloadFileToVirtualDirectoryOperationCompleted == null)) {
                this.DownloadFileToVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileToVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("DownloadFileToVirtualDirectory", new object[] {
                        SiteUrl,
                        DocLibName,
                        FileUrl}, this.DownloadFileToVirtualDirectoryOperationCompleted, userState);
        }
        
        private void OnDownloadFileToVirtualDirectoryOperationCompleted(object arg) {
            if ((this.DownloadFileToVirtualDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileToVirtualDirectoryCompleted(this, new DownloadFileToVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateDocLib", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateDocLib(string SiteUrl, string DocLibName, string DocLibDesc) {
            this.Invoke("CreateDocLib", new object[] {
                        SiteUrl,
                        DocLibName,
                        DocLibDesc});
        }
        
        /// <remarks/>
        public void CreateDocLibAsync(string SiteUrl, string DocLibName, string DocLibDesc) {
            this.CreateDocLibAsync(SiteUrl, DocLibName, DocLibDesc, null);
        }
        
        /// <remarks/>
        public void CreateDocLibAsync(string SiteUrl, string DocLibName, string DocLibDesc, object userState) {
            if ((this.CreateDocLibOperationCompleted == null)) {
                this.CreateDocLibOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDocLibOperationCompleted);
            }
            this.InvokeAsync("CreateDocLib", new object[] {
                        SiteUrl,
                        DocLibName,
                        DocLibDesc}, this.CreateDocLibOperationCompleted, userState);
        }
        
        private void OnCreateDocLibOperationCompleted(object arg) {
            if ((this.CreateDocLibCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDocLibCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAuthority", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddAuthority(string SiteUrl, System.Data.DataTable AdDatatable) {
            this.Invoke("AddAuthority", new object[] {
                        SiteUrl,
                        AdDatatable});
        }
        
        /// <remarks/>
        public void AddAuthorityAsync(string SiteUrl, System.Data.DataTable AdDatatable) {
            this.AddAuthorityAsync(SiteUrl, AdDatatable, null);
        }
        
        /// <remarks/>
        public void AddAuthorityAsync(string SiteUrl, System.Data.DataTable AdDatatable, object userState) {
            if ((this.AddAuthorityOperationCompleted == null)) {
                this.AddAuthorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAuthorityOperationCompleted);
            }
            this.InvokeAsync("AddAuthority", new object[] {
                        SiteUrl,
                        AdDatatable}, this.AddAuthorityOperationCompleted, userState);
        }
        
        private void OnAddAuthorityOperationCompleted(object arg) {
            if ((this.AddAuthorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAuthorityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImageCompress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageCompress(double scaleFactor, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Ary) {
            object[] results = this.Invoke("ImageCompress", new object[] {
                        scaleFactor,
                        Ary});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ImageCompressAsync(double scaleFactor, byte[] Ary) {
            this.ImageCompressAsync(scaleFactor, Ary, null);
        }
        
        /// <remarks/>
        public void ImageCompressAsync(double scaleFactor, byte[] Ary, object userState) {
            if ((this.ImageCompressOperationCompleted == null)) {
                this.ImageCompressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImageCompressOperationCompleted);
            }
            this.InvokeAsync("ImageCompress", new object[] {
                        scaleFactor,
                        Ary}, this.ImageCompressOperationCompleted, userState);
        }
        
        private void OnImageCompressOperationCompleted(object arg) {
            if ((this.ImageCompressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImageCompressCompleted(this, new ImageCompressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImageAutoCompress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageAutoCompress(int fileLength, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Ary) {
            object[] results = this.Invoke("ImageAutoCompress", new object[] {
                        fileLength,
                        Ary});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void ImageAutoCompressAsync(int fileLength, byte[] Ary) {
            this.ImageAutoCompressAsync(fileLength, Ary, null);
        }
        
        /// <remarks/>
        public void ImageAutoCompressAsync(int fileLength, byte[] Ary, object userState) {
            if ((this.ImageAutoCompressOperationCompleted == null)) {
                this.ImageAutoCompressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImageAutoCompressOperationCompleted);
            }
            this.InvokeAsync("ImageAutoCompress", new object[] {
                        fileLength,
                        Ary}, this.ImageAutoCompressOperationCompleted, userState);
        }
        
        private void OnImageAutoCompressOperationCompleted(object arg) {
            if ((this.ImageAutoCompressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImageAutoCompressCompleted(this, new ImageAutoCompressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sayHello", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sayHello() {
            object[] results = this.Invoke("sayHello", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sayHelloAsync() {
            this.sayHelloAsync(null);
        }
        
        /// <remarks/>
        public void sayHelloAsync(object userState) {
            if ((this.sayHelloOperationCompleted == null)) {
                this.sayHelloOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsayHelloOperationCompleted);
            }
            this.InvokeAsync("sayHello", new object[0], this.sayHelloOperationCompleted, userState);
        }
        
        private void OnsayHelloOperationCompleted(object arg) {
            if ((this.sayHelloCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sayHelloCompleted(this, new sayHelloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadFileToDocLibCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFileNameForDocLibCompletedEventHandler(object sender, GetFileNameForDocLibCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileNameForDocLibCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileNameForDocLibCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteFilesOfDocLibCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void HasFileCompletedEventHandler(object sender, HasFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateFolderToDocLibCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFileNameForDocLibComCompletedEventHandler(object sender, GetFileNameForDocLibComCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileNameForDocLibComCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileNameForDocLibComCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFolderNameForDocLibComCompletedEventHandler(object sender, GetFolderNameForDocLibComCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderNameForDocLibComCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFolderNameForDocLibComCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadFileToVirtualDirectoryCompletedEventHandler(object sender, DownloadFileToVirtualDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileToVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileToVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateDocLibCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddAuthorityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ImageCompressCompletedEventHandler(object sender, ImageCompressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImageCompressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImageCompressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ImageAutoCompressCompletedEventHandler(object sender, ImageAutoCompressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImageAutoCompressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImageAutoCompressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void sayHelloCompletedEventHandler(object sender, sayHelloCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sayHelloCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sayHelloCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591